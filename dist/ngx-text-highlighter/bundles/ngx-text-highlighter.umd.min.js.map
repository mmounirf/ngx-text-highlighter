{"version":3,"sources":["ng://ngx-text-highlighter/lib/ngx-text-highlighter.service.ts","ng://ngx-text-highlighter/lib/services/events.service.ts","ng://ngx-text-highlighter/lib/ngx-text-highlighter.component.ts","ng://ngx-text-highlighter/lib/components/textarea/textarea.component.ts","ng://ngx-text-highlighter/lib/components/stored-highlights/stored-highlights.component.ts","ng://ngx-text-highlighter/lib/components/marker/marker.component.ts","ng://ngx-text-highlighter/lib/pipes/color-filter.pipe.ts","ng://ngx-text-highlighter/lib/ngx-text-highlighter.module.ts"],"names":["NgxTextHighlighterService","Injectable","args","providedIn","EventsService","EventEmitter","prototype","dispatch","event","this","emit","listen","NgxTextHighlighterComponent","events","ngOnInit","_this","subscribe","origin","textSelection","selection","mouseEvent","ngOnDestroy","unsubscribe","Component","selector","template","styles","Output","Input","TextareaComponent","_document","type","marker","color","selectedText","restoreSelection","savedSelection","window","getSelection","sel","removeAllRanges","addRange","text","execCommand","onTextAreaBlur","getRangeAt","rangeCount","toString","createRange","document","onSelection","$event","value","Inject","DOCUMENT","StoredHighlightsComponent","store","push","setFilter","filter","isSelected","selectedFilters","splice","indexOf","includes","MarkerComponent","markerStyle","markerWidth","getComputedStyle","floatingMarker","nativeElement","width","selectionWidth","getBoundingClientRect","xCenter","parseInt","positionX","left","positionY","top","visibility","mark","ViewChild","ColorFilterPipe","transform","items","length","item","isFilterExist","itemColor","Pipe","name","pure","NgxTextHighlighterModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"iVAAA,IAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAHd,GCAAC,EAAA,WAQE,SAAAA,eAF2B,IAAIC,EAAAA,oBAI/BD,EAAAE,UAAAC,SAAA,SAASC,GACPC,KAAKD,MAAME,KAAKF,IAIlBJ,EAAAE,UAAAK,OAAA,WACE,OAAOF,KAAKD,2BAdfP,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAHd,GCAAS,EAAA,WAgBE,SAAAA,EAAsBC,GAAAJ,KAAAI,OAAAA,qBAHsB,IAAIR,EAAAA,8BACZ,oBACV,CAAC,UAAW,UAAW,kBAGjDO,EAAAN,UAAAQ,SAAA,WAAA,IAAAC,EAAAN,KAEEA,KAAKI,OAAOF,SAASK,UAAU,SAAAR,GAE7B,OAAQA,EAAMS,QAEZ,IAAA,WAEEF,EAAKG,cAAcR,KAAK,CAACS,UAAWX,EAAMW,UAAWC,WAAYZ,EAAMY,iBAU/ER,EAAAN,UAAAe,YAAA,WACEZ,KAAKI,OAAOF,SAASW,mCAlCxBC,EAAAA,UAASrB,KAAA,CAAC,CACTsB,SAAU,eACVC,SAAU,yLAKVC,OAAQ,gDATDtB,4CAYNuB,EAAAA,4BACAC,EAAAA,MAAK1B,KAAA,CAAC,+BACN0B,EAAAA,MAAK1B,KAAA,CAAC,eAfT,GCAA2B,EAAA,WAuBE,SAAAA,EAAuCC,EAAwBjB,GAAxBJ,KAAAqB,UAAAA,EAAwBrB,KAAAI,OAAAA,YAFxB,IAAIR,EAAAA,oBAI3CwB,EAAAvB,UAAAQ,SAAA,WAAA,IAAAC,EAAAN,KAEEA,KAAKI,OAAOF,SAASK,UAAU,SAACR,GAET,WAAjBA,EAAMS,QAAsC,cAAfT,EAAMuB,MAErChB,EAAKiB,OAAOxB,EAAMyB,MAAOlB,EAAKmB,iBAKpCL,EAAAvB,UAAA6B,iBAAA,WACE,IAAI1B,KAAK2B,eAUP,OAAO,EATP,GAAIC,OAAOC,aAAc,CACvB,IAAMC,EAAMF,OAAOC,eAGnB,OAFAC,EAAIC,kBACJD,EAAIE,SAAShC,KAAK2B,iBACX,EACF,QAAI3B,KAAKqB,UAAUQ,mBAAnB,GAQXT,EAAAvB,UAAA0B,OAAA,SAAOC,EAAeS,GAEhBjC,KAAK0B,qBAEP1B,KAAKqB,UAAUa,YAAY,eAAe,EAAOV,GAEjDxB,KAAKI,OAAON,SAAS,CAACU,OAAQ,WAAYc,KAAM,QAASE,MAAOA,EAAOS,KAAMA,MAGjFb,EAAAvB,UAAAsC,eAAA,WAEE,GAAIP,OAAOC,aAAc,CAEvB,IAAMnB,EAAYkB,OAAOC,eAErBnB,EAAU0B,YAAc1B,EAAU2B,aAEpCrC,KAAK2B,eAAiBjB,EAAU0B,WAAW,GAC3CpC,KAAKyB,aAAef,EAAU4B,iBAEvBtC,KAAKqB,UAAUQ,cAAgB7B,KAAKqB,UAAUkB,YACvDvC,KAAK2B,eAAiBa,SAASD,cAE/BvC,KAAK2B,eAAiB,MAM1BP,EAAAvB,UAAA4C,YAAA,SAAYC,GACV,IAAMhC,EAAYkB,OAAOC,eACF,UAAnBnB,EAAUY,MACZtB,KAAKI,OAAON,SAAS,CAACU,OAAQ,WAAYc,KAAM,YAAaqB,MAAOjC,IAI/C,UAAnBA,EAAUY,MACZtB,KAAKI,OAAON,SAAS,CAACU,OAAQ,WAAYc,KAAM,8BApFrDR,EAAAA,UAASrB,KAAA,CAAC,CACTsB,SAAU,cACVC,SAAU,8MAQVC,OAAQ,CAAC,4YASI2B,EAAAA,OAAMnD,KAAA,CAAEoD,EAAAA,mBArBdlD,mCAmBNuB,EAAAA,YArBH,GCAA4B,EAAA,WAsBE,SAAAA,EAAsB1C,GAAAJ,KAAAI,OAAAA,aAHE,wBAES,UAGjC0C,EAAAjD,UAAAQ,SAAA,WAAA,IAAAC,EAAAN,KACEA,KAAKI,OAAOF,SAASK,UAAU,SAACR,GACT,aAAjBA,EAAMS,QAAwC,UAAfT,EAAMuB,MACvChB,EAAKyC,MAAMC,KAAK,CAACf,KAAMlC,EAAMkC,KAAMT,MAAOzB,EAAMyB,WAMtDsB,EAAAjD,UAAAoD,UAAA,SAAUC,GAERlD,KAAKmD,WAAWD,GAAUlD,KAAKoD,gBAAgBC,OAAOrD,KAAKoD,gBAAgBE,QAAQJ,GAAS,GAAKlD,KAAKoD,gBAAgBJ,KAAKE,IAG7HJ,EAAAjD,UAAAsD,WAAA,SAAWD,GACT,OAAOlD,KAAKoD,gBAAgBG,SAASL,wBApCxCpC,EAAAA,UAASrB,KAAA,CAAC,CACTsB,SAAU,uBACVC,SAAU,mnBAWVC,OAAQ,CAAC,+9BAfFtB,oCAkBNwB,EAAAA,MAAK1B,KAAA,CAAC,0BACN0B,EAAAA,MAAK1B,KAAA,CAAC,gBApBT,GCAA+D,EAAA,WAsBE,SAAAA,EAAsBpD,GAAAJ,KAAAI,OAAAA,iBANV,iBACA,kBACC,0BACuB,eAKpCoD,EAAA3D,UAAAQ,SAAA,WAAA,IAAAC,EAAAN,KACEA,KAAKI,OAAOF,SAASK,UAAU,SAACR,GAE9B,GAAqB,aAAjBA,EAAMS,QAAwC,cAAfT,EAAMuB,MAA6C,UAArBhB,EAAKmD,YAAyB,CAE7F,IAAMC,EAAc9B,OAAO+B,iBAAiBrD,EAAKsD,eAAeC,eAAeC,MAEzEC,EAAiBhE,EAAM4C,MAAMP,WAAW,GAAG4B,wBAAwBF,MACnEG,GAAWC,SAASR,EAAa,GAAKK,GAAkB,EAG9DzD,EAAK6D,UAAYpE,EAAM4C,MAAMP,WAAW,GAAG4B,wBAAwBI,KAAOH,EAE1E3D,EAAK+D,UAAYtE,EAAM4C,MAAMP,WAAW,GAAG4B,wBAAwBM,IAAM,GAGzEhE,EAAKiE,WAAa,UAIC,aAAjBxE,EAAMS,QAAwC,SAAfT,EAAMuB,MAAwC,UAArBhB,EAAKmD,cAE/DnD,EAAKiE,WAAa,aAKxBf,EAAA3D,UAAA2E,KAAA,SAAKhD,GACHxB,KAAKI,OAAON,SAAS,CACnBU,OAAQ,SACRc,KAAM,YACNE,MAAOA,yBApDZV,EAAAA,UAASrB,KAAA,CAAC,CACTsB,SAAU,YACVC,SAAU,0fAQVC,OAAQ,CAAC,4jCAZFtB,0CAkBNwB,EAAAA,MAAK1B,KAAA,CAAC,+BACN0B,EAAAA,MAAK1B,KAAA,CAAC,kCACNgF,EAAAA,UAAShF,KAAA,CAAC,uBArBb,GCAAiF,EAAA,gCAQEA,EAAA7E,UAAA8E,UAAA,SAAUC,EAAcnF,GAAxB,IAAAa,EAAAN,KAEE,OAAoB,IAAhBP,EAAKoF,QAAiBpF,EAKjBmF,EAAM1B,OAAO,SAAA4B,GAAQ,OAAAxE,EAAKyE,cAAcD,EAAKtD,MAAO/B,KAHpDmF,GAQXF,EAAA7E,UAAAkF,cAAA,SAAcC,EAAWvF,GACvB,OAAOA,EAAK8D,SAASyB,wBAnBxBC,EAAAA,KAAIxF,KAAA,CAAC,CACJyF,KAAM,cACNC,MAAM,QAJR,GCAAC,EAAA,oDAQCC,EAAAA,SAAQ5F,KAAA,CAAC,CACR6F,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZrF,EACAiB,EACA0B,EACAU,EACAkB,GAEFe,QAAS,CAACtF,SAnBZ","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxTextHighlighterService {\n\n  constructor() { }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventsService {\n  event: EventEmitter<any> = new EventEmitter();\n\n  constructor() { }\n  // Dispatch events across components\n  dispatch(event) {\n    this.event.emit(event);\n  }\n\n  // Listens to dispatched events\n  listen() {\n    return this.event;\n  }\n}\n","import { Component, OnInit, Output, EventEmitter, OnDestroy, Input } from '@angular/core';\nimport { EventsService } from './services/events.service';\n\n@Component({\n  selector: 'th-container',\n  template: `\n    <th-marker [markerStyle]=\"markerStyle\" [colors]=\"colors\"></th-marker>\n    <th-textarea></th-textarea>\n    <th-stored-highlights [filters]=\"colors\"></th-stored-highlights>\n  `,\n  styles: []\n})\nexport class NgxTextHighlighterComponent implements OnInit, OnDestroy {\n  @Output() textSelection: EventEmitter<{}> = new EventEmitter();\n  @Input('markerStyle') markerStyle = 'fixed';\n  @Input('colors') colors = ['#f44336', '#ffeb3b', '#4caf50'];\n  constructor(protected events: EventsService) { }\n\n  ngOnInit() {\n    // Listens to events from child components\n    this.events.listen().subscribe(event => {\n      // Check event origin (which component dispatched this event)\n      switch (event.origin) {\n        // Events coming from the textarea component\n        case ('textarea'):\n          // Emit event to the library component output\n          this.textSelection.emit({selection: event.selection, mouseEvent: event.mouseEvent});\n        break;\n\n        default:\n        break;\n      }\n    });\n\n  }\n\n  ngOnDestroy() {\n    this.events.listen().unsubscribe();\n  }\n\n}\n","import { Component, OnInit, ViewChild, Inject, EventEmitter, Output } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { EventsService } from '../../services/events.service';\n\n@Component({\n  selector: 'th-textarea',\n  template: `    <div class=\"textarea\"\n        (mouseup)=\"onSelection($event)\"\n        [attr.contenteditable]=\"true\"\n        (blur)=\"onTextAreaBlur()\"\n        placeholder=\"Enter text here...\"\n    >\n    </div>\n`,\n  styles: [`.textarea{height:250px;overflow:auto;background-color:#fff;padding:20px;box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12);border-radius:4px;line-height:2em}.textarea:focus{outline:0}[contenteditable=true]:empty:before{content:attr(placeholder);display:block;color:#676767}`]\n})\n\nexport class TextareaComponent implements OnInit {\n  savedSelection: Range | null;\n  selectedText: string;\n\n  @Output() blur: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(@Inject (DOCUMENT) private _document: any, private events: EventsService) { }\n\n  ngOnInit() {\n    // Listen to events\n    this.events.listen().subscribe((event) => {\n      // Marker events\n      if (event.origin === 'marker' && event.type === 'highlight') {\n        // Highlight text\n        this.marker(event.color, this.selectedText);\n      }\n    });\n  }\n\n  restoreSelection(): boolean {\n    if (this.savedSelection) {\n      if (window.getSelection) {\n        const sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(this.savedSelection);\n        return true;\n      } else if (this._document.getSelection) {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  marker(color: string, text: string): void {\n    // We have a selection?\n    if (this.restoreSelection()) {\n      // Execute background color\n      this._document.execCommand('hiliteColor', false, color);\n      // Trigger stored highlights\n      this.events.dispatch({origin: 'textarea', type: 'store', color: color, text: text});\n    }\n  }\n  onTextAreaBlur() {\n    // Browser supports getSelection()?\n    if (window.getSelection) {\n      // Get selection\n      const selection = window.getSelection();\n      // Browser support range?\n      if (selection.getRangeAt && selection.rangeCount) {\n        // Get range and selected text\n        this.savedSelection = selection.getRangeAt(0);\n        this.selectedText = selection.toString();\n      }\n    } else if (this._document.getSelection && this._document.createRange) {\n      this.savedSelection = document.createRange();\n    } else {\n      this.savedSelection = null;\n    }\n\n  }\n\n  // Get selection before blur (for floating marker)\n  onSelection($event) {\n    const selection = window.getSelection();\n    if (selection.type === 'Range') {\n      this.events.dispatch({origin: 'textarea', type: 'selection', value: selection});\n    }\n\n    // Selection is not a range, means the user just places caret in another place, let's let the floating marker knows about it\n    if (selection.type !== 'Range') {\n      this.events.dispatch({origin: 'textarea', type: 'blur'});\n    }\n  }\n\n\n}\n\n\n","import { Component, OnInit, Input } from '@angular/core';\nimport { EventsService } from '../../services/events.service';\n\n@Component({\n  selector: 'th-stored-highlights',\n  template: `<div class=\"storage-wrapper\">\n  <ul class=\"storage-filters\">\n    <li *ngFor=\"let filter of filters\" [ngStyle]=\"{'background-color': filter}\" [ngClass]=\"isSelected(filter) ? 'selected' : ''\" (click)=\"setFilter(filter)\"></li>\n  </ul>\n  <div class=\"storage-list\">\n    <span *ngIf=\"(store | colorFilter:selectedFilters).length < 1 && store.length > 0\">No items matches the selected filter</span>\n    <span *ngIf=\"store.length < 1\">You've no highlighted items</span>\n    <p *ngFor=\"let item of store | colorFilter:selectedFilters\" [ngStyle]=\"{'background-color': item.color}\">{{item.text}}</p>\n  </div>\n</div>\n`,\n  styles: [`.storage-wrapper{box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}ul.storage-filters{display:flex;margin:20px 0 0;background-color:#e1e1e1;padding:20px;border-radius:4px 4px 0 0}.storage-filters li{width:30px;height:30px;cursor:pointer;box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);list-style:none;margin-right:10px;position:relative}.storage-filters li.selected:after{position:absolute;content:'\\\\2713';font-size:25px;color:#fff;font-weight:bolder;text-align:center;width:30px;height:30px}div.storage-list{display:inline-block;padding:20px}.storage-list span{color:#676767}.storage-list p{padding:10px;margin:10px 0;float:left;clear:left;border-radius:4px;box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);transition:box-shadow .3s cubic-bezier(.25,.8,.25,1);cursor:pointer}.storage-list p:hover{box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22)}`]\n})\nexport class StoredHighlightsComponent implements OnInit {\n  @Input('store') store = [];\n  @Input('filters') filters;\n  selectedFilters: Array<string> = [];\n  constructor(protected events: EventsService) { }\n\n  ngOnInit() {\n    this.events.listen().subscribe((event) => {\n      if (event.origin === 'textarea' && event.type === 'store') {\n        this.store.push({text: event.text, color: event.color});\n      }\n    });\n\n  }\n\n  setFilter(filter) {\n    // Check first if filter exists, if yes it will remove the filter if not it will push it to the selectedFilters\n    this.isSelected(filter) ? this.selectedFilters.splice(this.selectedFilters.indexOf(filter), 1) : this.selectedFilters.push(filter);\n  }\n\n  isSelected(filter) {\n    return this.selectedFilters.includes(filter);\n  }\n\n}\n","import { Component, OnInit, Input, ViewChild } from '@angular/core';\nimport { EventsService } from '../../services/events.service';\n\n@Component({\n  selector: 'th-marker',\n  template: `<div class=\"fixed colors\" *ngIf=\"markerStyle === 'fixed'\">\n  <div class=\"color\" *ngFor=\"let color of colors\" [ngStyle]=\"{'background-color': color}\" (click)=\"mark(color)\"></div>\n</div>\n\n<div #floatingMarker class=\"floating colors\" *ngIf=\"markerStyle === 'float'\" [ngStyle]=\"{'left': positionX+'px', 'top': positionY+'px', 'visibility': visibility}\">\n    <div class=\"color\" *ngFor=\"let color of colors\" [ngStyle]=\"{'background-color': color}\" (click)=\"mark(color)\"></div>\n</div>\n`,\n  styles: [`.colors.fixed{width:100%;display:flex;flex-wrap:wrap}.fixed>.color{width:30px;height:30px;margin:0 10px 10px 0;cursor:pointer;box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);transition:.3s cubic-bezier(.25,.8,.25,1)}.fixed>.color:hover{border-radius:50%;box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}.colors.floating{position:absolute;width:auto;background-color:#404040;border-radius:4px;box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12);transition:top .3s cubic-bezier(.25,.8,.25,1);display:flex}.floating>.color{margin:10px;cursor:pointer;width:30px;height:30px;transition:top .3s cubic-bezier(.25,.8,.25,1),border-radius .3s cubic-bezier(.25,.8,.25,1);z-index:10}.floating>.color:hover{border-radius:50%}.floating.colors:after{content:'';display:block;position:absolute;background-color:#404040;width:20px;height:20px;bottom:-5px;left:calc(50% - 10px);-webkit-transform:rotate(45deg);transform:rotate(45deg);z-index:1}`]\n})\nexport class MarkerComponent implements OnInit {\n  positionX = 0;\n  positionY = 0;\n  visibility = 'hidden';\n  @Input('markerStyle') markerStyle = 'fixed';\n  @Input('colors') colors;\n  @ViewChild('floatingMarker') floatingMarker: any;\n  constructor(protected events: EventsService) { }\n\n  ngOnInit() {\n    this.events.listen().subscribe((event) => {\n      // Event from textarea regarding text selection and marker style is set to float\n      if (event.origin === 'textarea' && event.type === 'selection' && this.markerStyle === 'float') {\n        // Our maker width is auto (TODO: colors can be added as an input), let's get its computed width\n        const markerWidth = window.getComputedStyle(this.floatingMarker.nativeElement).width;\n        // Selection width and height from range bounding rectangle\n        const selectionWidth = event.value.getRangeAt(0).getBoundingClientRect().width;\n        const xCenter = (parseInt(markerWidth, 0) - selectionWidth) / 2;\n\n\n        this.positionX = event.value.getRangeAt(0).getBoundingClientRect().left - xCenter;\n        // 64px = 4em (double the line height)\n        this.positionY = event.value.getRangeAt(0).getBoundingClientRect().top - 64;\n\n        // Let's show our floating marker\n        this.visibility = 'visible';\n      }\n\n      // Event from textarea regarding losing focus and marker style is set to float\n      if (event.origin === 'textarea' && event.type === 'blur' && this.markerStyle === 'float') {\n        // Let's hide our floating marker\n        this.visibility = 'hidden';\n      }\n    });\n  }\n\n  mark(color) {\n    this.events.dispatch({\n      origin: 'marker',\n      type: 'highlight',\n      color: color\n    });\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'colorFilter',\n  pure: false\n})\nexport class ColorFilterPipe implements PipeTransform {\n  // Items are sotred selections, args are selected filters\n  transform(items: any[], args: any[]) {\n    // If args are not defined or empty\n    if (args.length === 0 || !args) {\n      // Return all items\n      return items;\n    } else {\n      // Return only items with color value existing in args (selected filters)\n      return items.filter(item => this.isFilterExist(item.color, args));\n    }\n  }\n\n  // Check if item color included in the selected filters (args)\n  isFilterExist(itemColor, args) {\n    return args.includes(itemColor);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxTextHighlighterComponent } from './ngx-text-highlighter.component';\nimport { TextareaComponent } from './components/textarea/textarea.component';\nimport { StoredHighlightsComponent } from './components/stored-highlights/stored-highlights.component';\nimport { MarkerComponent } from './components/marker/marker.component';\nimport { CommonModule } from '@angular/common';\nimport { ColorFilterPipe } from './pipes/color-filter.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxTextHighlighterComponent,\n    TextareaComponent,\n    StoredHighlightsComponent,\n    MarkerComponent,\n    ColorFilterPipe\n  ],\n  exports: [NgxTextHighlighterComponent]\n})\nexport class NgxTextHighlighterModule { }\n"]}